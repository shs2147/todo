package com.todoList.demo.entity;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import javax.persistence.*;import javax.validation.constraints.Email;import javax.validation.constraints.NotBlank;import javax.validation.constraints.NotEmpty;import javax.validation.constraints.Pattern;import java.util.Collection;import java.util.Collections;import java.util.List;import java.util.Set;@Entitypublic class Employee implements UserDetails {    @Getter    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private int user_id;    @Getter    @Column(nullable = false)    @NotEmpty(message = "First name cannot be empty")    @Pattern(regexp = "^[a-zA-Z ]*$", message = "Only alphabets and spaces are allowed")    private String firstName;    @Getter    @Column(nullable = false)    @NotEmpty(message = "Last name cannot be empty")    @Pattern(regexp = "^[a-zA-Z ]*$", message = "Only alphabets and spaces are allowed")    private String lastName;    @Getter    @NotBlank(message = "Username is mandatory")    @Column(unique = true)    @Email(message = "Invalid email format")    private String userName;    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)    @Pattern(            regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$",            message = "Password must contain at least one uppercase letter, one lowercase letter, one digit, one special character, and have a minimum length of 8"    )    private String password;    @Getter    @NotEmpty(message = "Roles are mandatory")    private String roles;    @Getter    @OneToMany    private List<Note> notes;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        String roleName = "ROLE_" + roles;        SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(roleName);        return Collections.singletonList(simpleGrantedAuthority);    }    public void setUser_id(int user_id) {        this.user_id = user_id;    }    public void setFirstName(String firstName) {        this.firstName = firstName;    }    public void setLastName(String lastName) {        this.lastName = lastName;    }    public void setUserName(String userName) {        this.userName = userName;    }    @Override    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public void setRoles(String roles) {        this.roles = roles;    }    public void setNotes(List<Note> notes) {        this.notes = notes;    }    public Employee() {    }    public Employee(int user_id, String firstName, String lastName, String userName, String password, String roles, List<Note> notes) {        this.user_id = user_id;        this.firstName = firstName;        this.lastName = lastName;        this.userName = userName;        this.password = password;        this.roles = roles;        this.notes = notes;    }    @Override    public String getUsername() {        return userName;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }}