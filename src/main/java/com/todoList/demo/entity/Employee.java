package com.todoList.demo.entity;import com.fasterxml.jackson.annotation.JsonProperty;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import org.springframework.security.core.GrantedAuthority;import org.springframework.security.core.authority.SimpleGrantedAuthority;import org.springframework.security.core.userdetails.UserDetails;import javax.persistence.*;import javax.validation.constraints.Email;import javax.validation.constraints.NotBlank;import javax.validation.constraints.NotEmpty;import javax.validation.constraints.Pattern;import java.util.Collection;import java.util.Collections;import java.util.List;import java.util.Set;@Entity@Getter@Setter@NoArgsConstructor@AllArgsConstructorpublic class Employee implements UserDetails {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private int user_id;    @Column(nullable = false)    @NotEmpty(message = "First name cannot be empty")    @Pattern(regexp = "^[a-zA-Z ]*$", message = "Only alphabets and spaces are allowed")    private String firstName;    @Column(nullable = false)    @NotEmpty(message = "Last name cannot be empty")    @Pattern(regexp = "^[a-zA-Z ]*$", message = "Only alphabets and spaces are allowed")    private String lastName;    @NotBlank(message = "Username is mandatory")    @Column(unique = true)    @Email(message = "Invalid email format")    private String userName;    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)    @Pattern(            regexp = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&+=])(?=\\S+$).{8,}$",            message = "Password must contain at least one uppercase letter, one lowercase letter, one digit, one special character, and have a minimum length of 8"    )    private String password;    @NotEmpty(message = "Roles are mandatory")    private String roles;    @OneToMany    private List<Note> notes;    @Override    public Collection<? extends GrantedAuthority> getAuthorities() {        String roleName = "ROLE_" + roles;        SimpleGrantedAuthority simpleGrantedAuthority = new SimpleGrantedAuthority(roleName);        return Collections.singletonList(simpleGrantedAuthority);    }    @Override    public String getPassword() {        return password;    }    @Override    public String getUsername() {        return userName;    }    @Override    public boolean isAccountNonExpired() {        return true;    }    @Override    public boolean isAccountNonLocked() {        return true;    }    @Override    public boolean isCredentialsNonExpired() {        return true;    }    @Override    public boolean isEnabled() {        return true;    }}