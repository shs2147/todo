package com.todoList.demo.controller;import com.todoList.demo.ResponseHandler;import com.todoList.demo.entity.Employee;import com.todoList.demo.entity.Login;import com.todoList.demo.exception.CustomException;import com.todoList.demo.security.JwtAuthResponse;import com.todoList.demo.security.JwtTokenHelper;import com.todoList.demo.service.UsersService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.BadCredentialsException;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import javax.validation.Valid;@RestController@RequestMapping("/user")public class UsersController {    @Autowired    UsersService usersService;    @Autowired     JwtTokenHelper jwtTokenHelper;    @Autowired     AuthenticationManager authenticationManager;    @Autowired     UserDetailsService userDetailsService;    @PostMapping("/register")    public ResponseEntity<Object>register(@Valid @RequestBody Employee users){        return ResponseHandler.responseBuilder("User registered ", HttpStatus.OK,usersService.register(users));    }    private void authenticate(String username, String password) throws Exception {        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(username,                password);        try {            this.authenticationManager.authenticate(authenticationToken);        } catch (BadCredentialsException e) {            System.out.println("Invalid Details !!");            throw new CustomException("Invalid password !!");        }    }    @PostMapping("/login")    public ResponseEntity<Object> createToken(@Valid @RequestBody Login request) throws Exception {        this.authenticate(request.getUsername(), request.getPassword());        UserDetails userDetails = this.userDetailsService.loadUserByUsername(request.getUsername());        String token = this.jwtTokenHelper.generateToken(userDetails);        JwtAuthResponse response = new JwtAuthResponse();        response.setToken(token);        Employee user = usersService.user(request.getUsername());        if (user!=null) {//            response.setUserName(user.getEmployeeName());            response.setRoles(user.getRoles());            response.setId(String.valueOf(user.getUser_id()));            response.setEmail(user.getUsername());            return ResponseHandler.responseBuilder("Login Successful", HttpStatus.OK,                    response);        }else            throw new CustomException("hgf");//        return new ResponseEntity<>(response, HttpStatus.OK);    }}